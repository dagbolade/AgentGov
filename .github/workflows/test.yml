
name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-go:
    name: Go Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
          check-latest: true
          cache: true

      - name: Tidy dependencies
        run: go mod tidy
        working-directory: ./ai-governance-sidecar # Run this command in the sub-directory

      - name: Run tests with coverage
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        working-directory: ./ai-governance-sidecar # Run tests in the sub-directory

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # The action now looks for 'coverage.out' inside this directory
          working-directory: ./ai-governance-sidecar
          files: coverage.out
          flags: go-tests
          name: codecov-go

  test-rust:
    name: Rust Policy Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-governance-sidecar/policies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ai-governance-sidecar/policies/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Rust tests
        run: cargo test --all --verbose

      - name: Build WASM policies
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Verify WASM outputs
        run: |
          ls -lh wasm/
          test -f wasm/sensitive_data.wasm
          test -f wasm/rate_limit.wasm
          test -f wasm/passthrough.wasm

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-governance-sidecar
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
          cache: true
      
      - name: Tidy dependencies
        run: go mod tidy

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.55.2
          working-directory: ./ai-governance-sidecar
          args: --timeout=5m
          skip-cache: true
          skip-pkg-cache: true
          skip-build-cache: true

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: [test-go, test-rust] # Build only runs if both test jobs succeed
    defaults:
      run:
        working-directory: ./ai-governance-sidecar
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'

      - name: Build
        run: go build -v -o governance-sidecar ./cmd/sidecar

      - name: Test binary
        run: |
          if [ ! -f governance-sidecar ]; then
            echo "Binary not found!"
            exit 1
          fi
          echo "Binary built successfully"
          ls -lh governance-sidecar
