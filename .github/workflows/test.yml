name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-go:
    name: Go Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-governance-sidecar
    env:
      GOTOOLCHAIN: go1.25.1+auto
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
          check-latest: true
      
      - name: Verify go.mod
        run: |
          if [ ! -f go.mod ]; then
            echo "go.mod not found!"
            exit 1
          fi
          cat go.mod
      
      - name: Tidy dependencies
        run: go mod tidy
      
      - name: Run tests with coverage
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./ai-governance-sidecar/coverage.out
          flags: go-tests
          name: codecov-go

  test-rust:
    name: Rust Policy Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-governance-sidecar/policies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ai-governance-sidecar/policies/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run Rust tests
        run: cargo test --all --verbose
      
      - name: Build WASM policies
        run: |
          chmod +x build.sh
          ./build.sh
      
      - name: Verify WASM outputs
        run: |
          ls -lh wasm/
          test -f wasm/sensitive_data.wasm
          test -f wasm/rate_limit.wasm
          test -f wasm/passthrough.wasm

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-governance-sidecar
    env:
      GOOS: linux
      GOARCH: amd64
      CGO_ENABLED: 1
      GOFLAGS: "-tags=cgo"
      CC: gcc
      GOTOOLCHAIN: go1.25.1+auto

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
          check-latest: true

      - name: Install build deps for CGO
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config

      - name: Verify go.mod
        run: test -f go.mod

      - name: Download dependencies
        run: go mod download

      - name: Prime module graph (no compile)
        run: go list -deps ./... > /dev/null

      - name: Debug typecheck lines
        run: golangci-lint run -E typecheck --timeout=5m --print-issued-lines --out-format=colored-line-number --max-same-issues=0 --max-issues-per-linter=0

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.55.2
          args: --timeout=5m --build-tags=cgo
          working-directory: ./ai-governance-sidecar
          skip-cache: false
          skip-pkg-cache: false
          skip-build-cache: false


  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: [test-go, test-rust]
    defaults:
      run:
        working-directory: ./ai-governance-sidecar
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      
      - name: Build
        run: go build -v -o governance-sidecar ./cmd/sidecar
      
      - name: Test binary
        run: |
          if [ ! -f governance-sidecar ]; then
            echo "Binary not found!"
            exit 1
          fi
          echo "Binary built successfully"
          ls -lh governance-sidecar
