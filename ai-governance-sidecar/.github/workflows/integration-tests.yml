name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Unit tests run on multiple Go versions
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run unit tests
      run: make test-unit
    
    - name: Run unit tests with race detector
      run: go test -race -short ./internal/...

  # Integration tests require policy build
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Set up Rust (for WASM policies)
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          policies/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build WASM policies
      run: |
        cd policies
        chmod +x build.sh
        ./build.sh
    
    - name: Run integration tests
      run: make test-integration
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage-integration.out
        flags: integration
        name: integration-coverage

  # Docker Compose smoke tests
  docker-tests:
    name: Docker Compose Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Set up Rust (for WASM policies)
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
    
    - name: Build WASM policies
      run: |
        cd policies
        chmod +x build.sh
        ./build.sh
    
    - name: Build Docker images
      run: docker-compose build
    
    - name: Start Docker Compose
      run: docker-compose up -d
    
    - name: Wait for services
      run: |
        echo "Waiting for backend..."
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        echo "Waiting for UI..."
        timeout 60 bash -c 'until curl -f http://localhost:3000/; do sleep 2; done'
    
    - name: Run Docker smoke tests
      run: go test -v -run TestDockerCompose -timeout 10m ./test/integration/
    
    - name: Show logs on failure
      if: failure()
      run: docker-compose logs
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m
    
    - name: Check formatting
      run: |
        if [ -n "$(gofmt -s -l .)" ]; then
          echo "Code is not formatted. Run 'make fmt'"
          gofmt -s -d .
          exit 1
        fi
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Check mod tidy
      run: |
        go mod tidy
        if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
          echo "go.mod or go.sum is not tidy"
          git diff go.mod go.sum
          exit 1
        fi

  # Comprehensive coverage report
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
    
    - name: Build WASM policies
      run: |
        cd policies
        chmod +x build.sh
        ./build.sh
    
    - name: Run tests with coverage
      run: |
        go test -v -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out
        flags: unittests
        name: full-coverage
    
    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage HTML
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Build binary
      run: make build
    
    - name: Verify binary
      run: |
        ./bin/sidecar --help || echo "Binary created successfully"
    
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: sidecar-binary
        path: bin/sidecar
